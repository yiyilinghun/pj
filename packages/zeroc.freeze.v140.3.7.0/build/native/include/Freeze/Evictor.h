// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Evictor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Freeze_Evictor_h__
#define __Freeze_Evictor_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <Ice/ObjectAdapterF.h>
#include <Ice/ServantLocator.h>
#include <Freeze/Exception.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef FREEZE_API
#   if defined(ICE_STATIC_LIBS)
#       define FREEZE_API /**/
#   elif defined(FREEZE_API_EXPORTS)
#       define FREEZE_API ICE_DECLSPEC_EXPORT
#   else
#       define FREEZE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Freeze
{

class ServantInitializer;
class EvictorIterator;
class Evictor;

}

namespace Freeze
{

class ICE_CLASS(FREEZE_API) NoSuchElementException : public ::Ice::LocalExceptionHelper<NoSuchElementException, ::Ice::LocalException>
{
public:

    ICE_MEMBER(FREEZE_API) virtual ~NoSuchElementException();

    NoSuchElementException(const NoSuchElementException&) = default;

    NoSuchElementException(const char* file_, int line_) : ::Ice::LocalExceptionHelper<NoSuchElementException, ::Ice::LocalException>(file_, line_)
    {
    }

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    ICE_MEMBER(FREEZE_API) static const ::std::string& ice_staticId();
};

class ICE_CLASS(FREEZE_API) EvictorDeactivatedException : public ::Ice::LocalExceptionHelper<EvictorDeactivatedException, ::Ice::LocalException>
{
public:

    ICE_MEMBER(FREEZE_API) virtual ~EvictorDeactivatedException();

    EvictorDeactivatedException(const EvictorDeactivatedException&) = default;

    EvictorDeactivatedException(const char* file_, int line_) : ::Ice::LocalExceptionHelper<EvictorDeactivatedException, ::Ice::LocalException>(file_, line_)
    {
    }

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    ICE_MEMBER(FREEZE_API) static const ::std::string& ice_staticId();
};

}

namespace Freeze
{

class ICE_CLASS(FREEZE_API) ServantInitializer
{
public:

    ICE_MEMBER(FREEZE_API) virtual ~ServantInitializer();

    virtual void initialize(const ::std::shared_ptr<::Ice::ObjectAdapter>&, const ::Ice::Identity&, const ::std::string&, const ::std::shared_ptr<::Ice::Object>&) = 0;
};

class ICE_CLASS(FREEZE_API) EvictorIterator
{
public:

    ICE_MEMBER(FREEZE_API) virtual ~EvictorIterator();

    virtual bool hasNext() = 0;

    virtual ::Ice::Identity next() = 0;
};

class ICE_CLASS(FREEZE_API) Evictor : public virtual ::Ice::ServantLocator
{
public:

    ICE_MEMBER(FREEZE_API) virtual ~Evictor();

    virtual void setSize(int) = 0;

    virtual int getSize() = 0;

    virtual ::std::shared_ptr<::Ice::ObjectPrx> add(const ::std::shared_ptr<::Ice::Object>&, const ::Ice::Identity&) = 0;

    virtual ::std::shared_ptr<::Ice::ObjectPrx> addFacet(const ::std::shared_ptr<::Ice::Object>&, const ::Ice::Identity&, const ::std::string&) = 0;

    virtual ::std::shared_ptr<::Ice::Object> remove(const ::Ice::Identity&) = 0;

    virtual ::std::shared_ptr<::Ice::Object> removeFacet(const ::Ice::Identity&, const ::std::string&) = 0;

    virtual bool hasObject(const ::Ice::Identity&) = 0;

    virtual bool hasFacet(const ::Ice::Identity&, const ::std::string&) = 0;

    virtual ::std::shared_ptr<::Freeze::EvictorIterator> getIterator(const ::std::string&, int) = 0;
};

}

namespace Ice
{

}

namespace Freeze
{

using ServantInitializerPtr = ::std::shared_ptr<ServantInitializer>;

using EvictorIteratorPtr = ::std::shared_ptr<EvictorIterator>;

using EvictorPtr = ::std::shared_ptr<Evictor>;

}

#else // C++98 mapping

namespace Freeze
{

class ServantInitializer;
FREEZE_API ::Ice::LocalObject* upCast(::Freeze::ServantInitializer*);
typedef ::IceInternal::Handle< ::Freeze::ServantInitializer> ServantInitializerPtr;

class EvictorIterator;
FREEZE_API ::Ice::LocalObject* upCast(::Freeze::EvictorIterator*);
typedef ::IceInternal::Handle< ::Freeze::EvictorIterator> EvictorIteratorPtr;

class Evictor;
FREEZE_API ::Ice::LocalObject* upCast(::Freeze::Evictor*);
typedef ::IceInternal::Handle< ::Freeze::Evictor> EvictorPtr;

}

namespace Freeze
{

class FREEZE_API NoSuchElementException : public ::Ice::LocalException
{
public:

    NoSuchElementException(const char*, int);
    virtual ~NoSuchElementException() throw();

    virtual ::std::string ice_id() const;
    virtual NoSuchElementException* ice_clone() const;
    virtual void ice_throw() const;
};

class FREEZE_API EvictorDeactivatedException : public ::Ice::LocalException
{
public:

    EvictorDeactivatedException(const char*, int);
    virtual ~EvictorDeactivatedException() throw();

    virtual ::std::string ice_id() const;
    virtual EvictorDeactivatedException* ice_clone() const;
    virtual void ice_throw() const;
};

}

namespace Freeze
{

class FREEZE_API ServantInitializer : public virtual ::Ice::LocalObject
{
public:

    typedef ServantInitializerPtr PointerType;

    virtual ~ServantInitializer();

    virtual void initialize(const ::Ice::ObjectAdapterPtr&, const ::Ice::Identity&, const ::std::string&, const ::Ice::ObjectPtr&) = 0;
};

inline bool operator==(const ServantInitializer& lhs, const ServantInitializer& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const ServantInitializer& lhs, const ServantInitializer& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}

class FREEZE_API EvictorIterator : public virtual ::Ice::LocalObject
{
public:

    typedef EvictorIteratorPtr PointerType;

    virtual ~EvictorIterator();

    virtual bool hasNext() = 0;

    virtual ::Ice::Identity next() = 0;
};

inline bool operator==(const EvictorIterator& lhs, const EvictorIterator& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const EvictorIterator& lhs, const EvictorIterator& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}

class FREEZE_API Evictor : virtual public ::Ice::ServantLocator
{
public:

    typedef EvictorPtr PointerType;

    virtual ~Evictor();

    virtual void setSize(::Ice::Int) = 0;

    virtual ::Ice::Int getSize() = 0;

    virtual ::Ice::ObjectPrx add(const ::Ice::ObjectPtr&, const ::Ice::Identity&) = 0;

    virtual ::Ice::ObjectPrx addFacet(const ::Ice::ObjectPtr&, const ::Ice::Identity&, const ::std::string&) = 0;

    virtual ::Ice::ObjectPtr remove(const ::Ice::Identity&) = 0;

    virtual ::Ice::ObjectPtr removeFacet(const ::Ice::Identity&, const ::std::string&) = 0;

    virtual bool hasObject(const ::Ice::Identity&) = 0;

    virtual bool hasFacet(const ::Ice::Identity&, const ::std::string&) = 0;

    virtual ::Freeze::EvictorIteratorPtr getIterator(const ::std::string&, ::Ice::Int) = 0;
};

inline bool operator==(const Evictor& lhs, const Evictor& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const Evictor& lhs, const Evictor& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}

}

namespace Ice
{

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
