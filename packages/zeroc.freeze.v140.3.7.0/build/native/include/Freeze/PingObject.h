// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `PingObject.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Freeze_PingObject_h__
#define __Freeze_PingObject_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Freeze
{

class PingObject;

}

namespace Freeze
{

class PingObject : public ::Ice::ValueHelper<PingObject, Ice::Value>
{
public:

    virtual ~PingObject();

    PingObject() = default;

    PingObject(const PingObject&) = default;
    PingObject(PingObject&&) = default;
    PingObject& operator=(const PingObject&) = default;
    PingObject& operator=(PingObject&&) = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

static PingObject _iceS_PingObject_init;

}

namespace Freeze
{

}

namespace Ice
{

}

namespace Freeze
{

using PingObjectPtr = ::std::shared_ptr<PingObject>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace Freeze
{

class PingObject;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Freeze::PingObject>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Freeze::PingObject*);

}

}

namespace Freeze
{

class PingObject;
::Ice::Object* upCast(::Freeze::PingObject*);
typedef ::IceInternal::Handle< ::Freeze::PingObject> PingObjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Freeze::PingObject> PingObjectPrx;
typedef PingObjectPrx PingObjectPrxPtr;
void _icePatchObjectPtr(PingObjectPtr&, const ::Ice::ObjectPtr&);

}

namespace Freeze
{

}

namespace IceProxy
{

namespace Freeze
{

class PingObject : public virtual ::Ice::Proxy<PingObject, ::IceProxy::Ice::Object>
{
public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace Freeze
{

class PingObject : public virtual ::Ice::Object
{
public:

    typedef PingObjectPrx ProxyType;
    typedef PingObjectPtr PointerType;

    virtual ~PingObject();

    PingObject()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};
static ::Ice::ValueFactoryPtr _iceS_PingObject_init = ::Freeze::PingObject::ice_factory();

inline bool operator==(const PingObject& lhs, const PingObject& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const PingObject& lhs, const PingObject& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

}

namespace Freeze
{

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
