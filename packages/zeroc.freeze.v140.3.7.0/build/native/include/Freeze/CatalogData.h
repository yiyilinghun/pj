// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `CatalogData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Freeze_CatalogData_h__
#define __Freeze_CatalogData_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef FREEZE_API
#   if defined(ICE_STATIC_LIBS)
#       define FREEZE_API /**/
#   elif defined(FREEZE_API_EXPORTS)
#       define FREEZE_API ICE_DECLSPEC_EXPORT
#   else
#       define FREEZE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Freeze
{

struct CatalogData
{
    bool evictor;
    ::std::string key;
    ::std::string value;

    std::tuple<const bool&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(evictor, key, value);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Ice
{

template<>
struct StreamableTraits<::Freeze::CatalogData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Freeze::CatalogData, S>
{
    static void read(S* istr, ::Freeze::CatalogData& v)
    {
        istr->readAll(v.evictor, v.key, v.value);
    }
};

}

#else // C++98 mapping

namespace Freeze
{

struct CatalogData
{
    bool evictor;
    ::std::string key;
    ::std::string value;

    bool operator==(const CatalogData& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(evictor != rhs_.evictor)
        {
            return false;
        }
        if(key != rhs_.key)
        {
            return false;
        }
        if(value != rhs_.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CatalogData& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(evictor < rhs_.evictor)
        {
            return true;
        }
        else if(rhs_.evictor < evictor)
        {
            return false;
        }
        if(key < rhs_.key)
        {
            return true;
        }
        else if(rhs_.key < key)
        {
            return false;
        }
        if(value < rhs_.value)
        {
            return true;
        }
        else if(rhs_.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CatalogData& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const CatalogData& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const CatalogData& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const CatalogData& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::Freeze::CatalogData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Freeze::CatalogData, S>
{
    static void write(S* ostr, const ::Freeze::CatalogData& v)
    {
        ostr->write(v.evictor);
        ostr->write(v.key);
        ostr->write(v.value);
    }
};

template<typename S>
struct StreamReader< ::Freeze::CatalogData, S>
{
    static void read(S* istr, ::Freeze::CatalogData& v)
    {
        istr->read(v.evictor);
        istr->read(v.key);
        istr->read(v.value);
    }
};

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
