// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `PluginFacade.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceGrid_PluginFacade_h__
#define __IceGrid_PluginFacade_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/Current.h>
#include <IceGrid/Admin.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEGRID_API /**/
#   elif defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace IceGrid
{

class ReplicaGroupFilter;
class TypeFilter;
class RegistryPluginFacade;

}

namespace IceGrid
{

class ICE_CLASS(ICEGRID_API) ReplicaGroupFilter
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ReplicaGroupFilter();

    virtual ::Ice::StringSeq filter(const ::std::string&, const ::Ice::StringSeq&, const ::std::shared_ptr<::Ice::Connection>&, const ::Ice::Context&) = 0;
};

class ICE_CLASS(ICEGRID_API) TypeFilter
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~TypeFilter();

    virtual ::Ice::ObjectProxySeq filter(const ::std::string&, const ::Ice::ObjectProxySeq&, const ::std::shared_ptr<::Ice::Connection>&, const ::Ice::Context&) = 0;
};

class ICE_CLASS(ICEGRID_API) RegistryPluginFacade
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~RegistryPluginFacade();

    virtual ::IceGrid::ApplicationInfo getApplicationInfo(const ::std::string&) const = 0;

    virtual ::IceGrid::ServerInfo getServerInfo(const ::std::string&) const = 0;

    virtual ::std::string getAdapterServer(const ::std::string&) const = 0;

    virtual ::std::string getAdapterApplication(const ::std::string&) const = 0;

    virtual ::std::string getAdapterNode(const ::std::string&) const = 0;

    virtual ::IceGrid::AdapterInfoSeq getAdapterInfo(const ::std::string&) const = 0;

    virtual ::IceGrid::ObjectInfo getObjectInfo(const ::Ice::Identity&) const = 0;

    virtual ::IceGrid::NodeInfo getNodeInfo(const ::std::string&) const = 0;

    virtual ::IceGrid::LoadInfo getNodeLoad(const ::std::string&) const = 0;

    virtual ::std::string getPropertyForAdapter(const ::std::string&, const ::std::string&) const = 0;

    virtual void addReplicaGroupFilter(const ::std::string&, const ::std::shared_ptr<::IceGrid::ReplicaGroupFilter>&) = 0;

    virtual bool removeReplicaGroupFilter(const ::std::string&, const ::std::shared_ptr<::IceGrid::ReplicaGroupFilter>&) = 0;

    virtual void addTypeFilter(const ::std::string&, const ::std::shared_ptr<::IceGrid::TypeFilter>&) = 0;

    virtual bool removeTypeFilter(const ::std::string&, const ::std::shared_ptr<::IceGrid::TypeFilter>&) = 0;
};

}

namespace Ice
{

}

namespace IceGrid
{

using ReplicaGroupFilterPtr = ::std::shared_ptr<ReplicaGroupFilter>;

using TypeFilterPtr = ::std::shared_ptr<TypeFilter>;

using RegistryPluginFacadePtr = ::std::shared_ptr<RegistryPluginFacade>;

}

#else // C++98 mapping

namespace IceProxy
{

}

namespace IceGrid
{

class ReplicaGroupFilter;
ICEGRID_API ::Ice::LocalObject* upCast(::IceGrid::ReplicaGroupFilter*);
typedef ::IceInternal::Handle< ::IceGrid::ReplicaGroupFilter> ReplicaGroupFilterPtr;

class TypeFilter;
ICEGRID_API ::Ice::LocalObject* upCast(::IceGrid::TypeFilter*);
typedef ::IceInternal::Handle< ::IceGrid::TypeFilter> TypeFilterPtr;

class RegistryPluginFacade;
ICEGRID_API ::Ice::LocalObject* upCast(::IceGrid::RegistryPluginFacade*);
typedef ::IceInternal::Handle< ::IceGrid::RegistryPluginFacade> RegistryPluginFacadePtr;

}

namespace IceAsync
{

}

namespace IceProxy
{

}

namespace IceGrid
{

class ICEGRID_API ReplicaGroupFilter : public virtual ::Ice::LocalObject
{
public:

    typedef ReplicaGroupFilterPtr PointerType;

    virtual ~ReplicaGroupFilter();

    virtual ::Ice::StringSeq filter(const ::std::string&, const ::Ice::StringSeq&, const ::Ice::ConnectionPtr&, const ::Ice::Context&) = 0;
};

inline bool operator==(const ReplicaGroupFilter& lhs, const ReplicaGroupFilter& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const ReplicaGroupFilter& lhs, const ReplicaGroupFilter& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}

class ICEGRID_API TypeFilter : public virtual ::Ice::LocalObject
{
public:

    typedef TypeFilterPtr PointerType;

    virtual ~TypeFilter();

    virtual ::Ice::ObjectProxySeq filter(const ::std::string&, const ::Ice::ObjectProxySeq&, const ::Ice::ConnectionPtr&, const ::Ice::Context&) = 0;
};

inline bool operator==(const TypeFilter& lhs, const TypeFilter& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const TypeFilter& lhs, const TypeFilter& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}

class ICEGRID_API RegistryPluginFacade : public virtual ::Ice::LocalObject
{
public:

    typedef RegistryPluginFacadePtr PointerType;

    virtual ~RegistryPluginFacade();

    virtual ::IceGrid::ApplicationInfo getApplicationInfo(const ::std::string&) const = 0;

    virtual ::IceGrid::ServerInfo getServerInfo(const ::std::string&) const = 0;

    virtual ::std::string getAdapterServer(const ::std::string&) const = 0;

    virtual ::std::string getAdapterApplication(const ::std::string&) const = 0;

    virtual ::std::string getAdapterNode(const ::std::string&) const = 0;

    virtual ::IceGrid::AdapterInfoSeq getAdapterInfo(const ::std::string&) const = 0;

    virtual ::IceGrid::ObjectInfo getObjectInfo(const ::Ice::Identity&) const = 0;

    virtual ::IceGrid::NodeInfo getNodeInfo(const ::std::string&) const = 0;

    virtual ::IceGrid::LoadInfo getNodeLoad(const ::std::string&) const = 0;

    virtual ::std::string getPropertyForAdapter(const ::std::string&, const ::std::string&) const = 0;

    virtual void addReplicaGroupFilter(const ::std::string&, const ::IceGrid::ReplicaGroupFilterPtr&) = 0;

    virtual bool removeReplicaGroupFilter(const ::std::string&, const ::IceGrid::ReplicaGroupFilterPtr&) = 0;

    virtual void addTypeFilter(const ::std::string&, const ::IceGrid::TypeFilterPtr&) = 0;

    virtual bool removeTypeFilter(const ::std::string&, const ::IceGrid::TypeFilterPtr&) = 0;
};

inline bool operator==(const RegistryPluginFacade& lhs, const RegistryPluginFacade& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const RegistryPluginFacade& lhs, const RegistryPluginFacade& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}

}

namespace Ice
{

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
