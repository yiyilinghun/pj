// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `pj_database.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __pj_database_h__
#define __pj_database_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace MsDB
{

struct Account
{
    ::std::string account;
    ::std::string password;
    ::std::string Info;

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(account, password, Info);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Ice
{

template<>
struct StreamableTraits<::MsDB::Account>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::MsDB::Account, S>
{
    static void read(S* istr, ::MsDB::Account& v)
    {
        istr->readAll(v.account, v.password, v.Info);
    }
};

}

#else // C++98 mapping

namespace MsDB
{

struct Account
{
    ::std::string account;
    ::std::string password;
    ::std::string Info;

    bool operator==(const Account& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(account != rhs_.account)
        {
            return false;
        }
        if(password != rhs_.password)
        {
            return false;
        }
        if(Info != rhs_.Info)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Account& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(account < rhs_.account)
        {
            return true;
        }
        else if(rhs_.account < account)
        {
            return false;
        }
        if(password < rhs_.password)
        {
            return true;
        }
        else if(rhs_.password < password)
        {
            return false;
        }
        if(Info < rhs_.Info)
        {
            return true;
        }
        else if(rhs_.Info < Info)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Account& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Account& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Account& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Account& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::MsDB::Account>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::MsDB::Account, S>
{
    static void write(S* ostr, const ::MsDB::Account& v)
    {
        ostr->write(v.account);
        ostr->write(v.password);
        ostr->write(v.Info);
    }
};

template<typename S>
struct StreamReader< ::MsDB::Account, S>
{
    static void read(S* istr, ::MsDB::Account& v)
    {
        istr->read(v.account);
        istr->read(v.password);
        istr->read(v.Info);
    }
};

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
