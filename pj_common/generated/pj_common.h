// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `pj_common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __pj_common_h__
#define __pj_common_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace MsCommon
{

class IClock;
class IClockPrx;

}

namespace MsCommon
{

struct TimeOfDay
{
    short hour;
    short minute;
    short second;

    std::tuple<const short&, const short&, const short&> ice_tuple() const
    {
        return std::tie(hour, minute, second);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace MsCommon
{

class IClock : public virtual ::Ice::Object
{
public:

    using ProxyType = IClockPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::MsCommon::TimeOfDay getTime(const ::Ice::Current&) = 0;
    bool _iceD_getTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTime(::MsCommon::TimeOfDay, const ::Ice::Current&) = 0;
    bool _iceD_setTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace MsCommon
{

class IClockPrx : public virtual ::Ice::Proxy<IClockPrx, ::Ice::ObjectPrx>
{
public:

    ::MsCommon::TimeOfDay getTime(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::MsCommon::TimeOfDay>(true, this, &MsCommon::IClockPrx::_iceI_getTime, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getTimeAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::MsCommon::TimeOfDay>>().get_future())
    {
        return _makePromiseOutgoing<::MsCommon::TimeOfDay, P>(false, this, &MsCommon::IClockPrx::_iceI_getTime, context);
    }

    ::std::function<void()>
    getTimeAsync(::std::function<void(::MsCommon::TimeOfDay)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::MsCommon::TimeOfDay>(response, ex, sent, this, &MsCommon::IClockPrx::_iceI_getTime, context);
    }

    void _iceI_getTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MsCommon::TimeOfDay>>&, const ::Ice::Context&);

    void setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MsCommon::IClockPrx::_iceI_setTime, iceP_time, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setTimeAsync(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MsCommon::IClockPrx::_iceI_setTime, iceP_time, context);
    }

    ::std::function<void()>
    setTimeAsync(const ::MsCommon::TimeOfDay& iceP_time,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &MsCommon::IClockPrx::_iceI_setTime, iceP_time, context);
    }

    void _iceI_setTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::MsCommon::TimeOfDay&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    IClockPrx() = default;
    friend ::std::shared_ptr<IClockPrx> IceInternal::createProxy<IClockPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::MsCommon::TimeOfDay>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::MsCommon::TimeOfDay, S>
{
    static void read(S* istr, ::MsCommon::TimeOfDay& v)
    {
        istr->readAll(v.hour, v.minute, v.second);
    }
};

}

namespace MsCommon
{

using IClockPtr = ::std::shared_ptr<IClock>;
using IClockPrxPtr = ::std::shared_ptr<IClockPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace MsCommon
{

class IClock;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::MsCommon::IClock>&);
::IceProxy::Ice::Object* upCast(::IceProxy::MsCommon::IClock*);

}

}

namespace MsCommon
{

class IClock;
::Ice::Object* upCast(::MsCommon::IClock*);
typedef ::IceInternal::Handle< ::MsCommon::IClock> IClockPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MsCommon::IClock> IClockPrx;
typedef IClockPrx IClockPrxPtr;
void _icePatchObjectPtr(IClockPtr&, const ::Ice::ObjectPtr&);

}

namespace MsCommon
{

struct TimeOfDay
{
    ::Ice::Short hour;
    ::Ice::Short minute;
    ::Ice::Short second;

    bool operator==(const TimeOfDay& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(hour != rhs_.hour)
        {
            return false;
        }
        if(minute != rhs_.minute)
        {
            return false;
        }
        if(second != rhs_.second)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TimeOfDay& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(hour < rhs_.hour)
        {
            return true;
        }
        else if(rhs_.hour < hour)
        {
            return false;
        }
        if(minute < rhs_.minute)
        {
            return true;
        }
        else if(rhs_.minute < minute)
        {
            return false;
        }
        if(second < rhs_.second)
        {
            return true;
        }
        else if(rhs_.second < second)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TimeOfDay& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TimeOfDay& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TimeOfDay& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TimeOfDay& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace MsCommon
{

class Callback_IClock_getTime_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IClock_getTime_Base> Callback_IClock_getTimePtr;

class Callback_IClock_setTime_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IClock_setTime_Base> Callback_IClock_setTimePtr;

}

namespace IceProxy
{

namespace MsCommon
{

class IClock : public virtual ::Ice::Proxy<IClock, ::IceProxy::Ice::Object>
{
public:

    ::MsCommon::TimeOfDay getTime(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getTime(_iceI_begin_getTime(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getTime(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::MsCommon::Callback_IClock_getTimePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& context, const ::MsCommon::Callback_IClock_getTimePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(context, del, cookie);
    }

    ::MsCommon::TimeOfDay end_getTime(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getTime(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setTime(_iceI_begin_setTime(iceP_time, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setTime(iceP_time, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTime(iceP_time, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTime(iceP_time, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::MsCommon::Callback_IClock_setTimePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTime(iceP_time, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::MsCommon::TimeOfDay& iceP_time, const ::Ice::Context& context, const ::MsCommon::Callback_IClock_setTimePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTime(iceP_time, context, del, cookie);
    }

    void end_setTime(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setTime(const ::MsCommon::TimeOfDay&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace MsCommon
{

class IClock : public virtual ::Ice::Object
{
public:

    typedef IClockPrx ProxyType;
    typedef IClockPtr PointerType;

    virtual ~IClock();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::MsCommon::TimeOfDay getTime(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTime(const ::MsCommon::TimeOfDay&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const IClock& lhs, const IClock& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const IClock& lhs, const IClock& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::MsCommon::TimeOfDay>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::MsCommon::TimeOfDay, S>
{
    static void write(S* ostr, const ::MsCommon::TimeOfDay& v)
    {
        ostr->write(v.hour);
        ostr->write(v.minute);
        ostr->write(v.second);
    }
};

template<typename S>
struct StreamReader< ::MsCommon::TimeOfDay, S>
{
    static void read(S* istr, ::MsCommon::TimeOfDay& v)
    {
        istr->read(v.hour);
        istr->read(v.minute);
        istr->read(v.second);
    }
};

}

namespace MsCommon
{

template<class T>
class CallbackNC_IClock_getTime : public Callback_IClock_getTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::MsCommon::TimeOfDay&);

    CallbackNC_IClock_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::MsCommon::IClockPrx proxy = ::MsCommon::IClockPrx::uncheckedCast(result->getProxy());
        ::MsCommon::TimeOfDay ret;
        try
        {
            ret = proxy->end_getTime(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_IClock_getTimePtr
newCallback_IClock_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::MsCommon::TimeOfDay&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IClock_getTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IClock_getTimePtr
newCallback_IClock_getTime(T* instance, void (T::*cb)(const ::MsCommon::TimeOfDay&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IClock_getTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IClock_getTime : public Callback_IClock_getTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::MsCommon::TimeOfDay&, const CT&);

    Callback_IClock_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::MsCommon::IClockPrx proxy = ::MsCommon::IClockPrx::uncheckedCast(result->getProxy());
        ::MsCommon::TimeOfDay ret;
        try
        {
            ret = proxy->end_getTime(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_IClock_getTimePtr
newCallback_IClock_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::MsCommon::TimeOfDay&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IClock_getTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IClock_getTimePtr
newCallback_IClock_getTime(T* instance, void (T::*cb)(const ::MsCommon::TimeOfDay&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IClock_getTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IClock_setTime : public Callback_IClock_setTime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IClock_setTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IClock_setTimePtr
newCallback_IClock_setTime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IClock_setTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IClock_setTimePtr
newCallback_IClock_setTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IClock_setTime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IClock_setTimePtr
newCallback_IClock_setTime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IClock_setTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IClock_setTimePtr
newCallback_IClock_setTime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IClock_setTime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IClock_setTime : public Callback_IClock_setTime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IClock_setTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IClock_setTimePtr
newCallback_IClock_setTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IClock_setTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IClock_setTimePtr
newCallback_IClock_setTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IClock_setTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IClock_setTimePtr
newCallback_IClock_setTime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IClock_setTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IClock_setTimePtr
newCallback_IClock_setTime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IClock_setTime<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
